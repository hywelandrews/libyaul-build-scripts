#!/bin/bash

# -*- mode: sh -*-

PROGNAME="${0##*/}"

panic () {
    printf -- "${PROGNAME}: Error: %s\\n" "${1}" >&2
    exit "${2}"
}

# Strip trailing '/'s
case ${1} in
    *[!/]*) RTAGS_BUILD_ROOT=${1%"${1##*[!/]}"};;
    *[/]) RTAGS_BUILD_ROOT="/";;
esac

if [ -z "${RTAGS_BUILD_ROOT}" ]; then
    panic "Undefined RTAGS_BUILD_ROOT (build root directory)" 2
fi

RTAGS_BUILD_PATH="${RTAGS_BUILD_ROOT%*/}/.rtags"
RTAGS_LOG="rdm.log"

# If empty, default to YAUL_ARCH_SH_PREFIX
# If empty, default to YAUL_ARCH_SH_PREFIX
if [ -z "${YAUL_PROG_SH_PREFIX}" ]; then
    YAUL_PROG_SH_PREFIX=$(printf "%s" "${YAUL_ARCH_SH_PREFIX}")
fi

SH_CC="${YAUL_INSTALL_ROOT}/bin/${YAUL_PROG_SH_PREFIX}-gcc"

SH_CC_VERSION=`${SH_CC} --version | grep '^'${YAUL_ARCH_SH_PREFIX}'-gcc' | sed 's/^.* //g'`

[ -n "${YAUL_INSTALL_ROOT}" ] || panic "Undefined YAUL_INSTALL_ROOT (install root directory)" 1
[ -d "${YAUL_INSTALL_ROOT}" ] || panic "Invalid YAUL_INSTALL_ROOT (install root directory) value" 1
[ -n "${YAUL_ARCH_SH_PREFIX}" ] || panic "Undefined YAUL_ARCH_SH_PREFIX (tool-chain prefix)" 1
[ -x "${SH_CC}" ] || panic "Invalid executable \`${SH_CC}'" 1
[ -n "${YAUL_CDB}" ] || panic "RTags support is disabled. Set \${YAUL_CDB} to \`true'" 1

# Obtain path of `rdm' executable. If YAUL_CDB_RDM_PATH is not set, the
RDM=`command -v "rdm" 2>/dev/null || printf -- "${YAUL_CDB_RDM_PATH}"`

([ -f "${RDM}" ] && [ -x "${RDM}" ]) || panic "Executable \`rdm' not found in \${PATH} or \${YAUL_CDB_RDM_PATH}" 1

if ! mkdir -p "${RTAGS_BUILD_PATH}" >/dev/null 2>&1; then
    panic "RTags directory \`${RTAGS_BUILD_PATH}' cannot be created" 1
fi

if ! mkdir -p "${RTAGS_BUILD_PATH%*/}/cache" >/dev/null 2>&1; then
    panic "RTags directory \`${RTAGS_BUILD_PATH}' cannot be created" 1
fi

[ -n "${SH_CC_VERSION}" ] || panic "Cannot defer SH-2 GCC version from ${SH_CC}" 1

# Check if we extracted the version string correctly by checking if the path
# exists
if ! [ -d "${YAUL_INSTALL_ROOT}/lib/gcc/${YAUL_PROG_SH_PREFIX}/${SH_CC_VERSION}/include" ]; then
    panic "Cannot defer SH-2 GCC version from ${SH_CC}" 1
fi

RDM_ARGS=(--data-dir "${RTAGS_BUILD_PATH%*/}/cache" \
    --silent \
    --log-file "${RTAGS_BUILD_PATH%*/}/${RTAGS_LOG}" \
    --log-file-log-level verbose-debug \
    --max-include-completion-depth 100 \
    --no-libclang-include-path \
    --isystem "${YAUL_INSTALL_ROOT}/lib/gcc/${YAUL_PROG_SH_PREFIX}/${SH_CC_VERSION}/include")

# Kludge: Because our custom GCC specs file specifies the include
#         paths, Clang doesn't know about them:
#
#         The clang driver has no direct correspondent for
#         "specs".
set -x
exec ${RDM} "${RDM_ARGS[@]}"
